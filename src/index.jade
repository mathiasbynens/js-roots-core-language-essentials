doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title JavaScript Roots: Core Language Essentials

    link(href='http://fonts.googleapis.com/css?family=Open+Sans:300,600', rel='stylesheet', type='text/css')

    // build:css styles/styles.css
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-twilight.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section.main
        h1 JavaScript Roots
          span Core Language Essentials
        h3
          a(href='https://twitter.com/bramus') @bramus
        img.avatar.avatar--small(src='images/bramus.png')

      section.light(data-bespoke-state='green')
        h2 I. Variable types and values

      section
        pre.language-javascript
          code.
            var a;

      section
        pre.language-javascript
          code.
            var a;
            console.log(a);

      section
        pre.language-javascript
          code.
            console.log(b);

      section
        pre.language-javascript
          code.
            var a = 3;
            console.log(typeof a);

      section
        pre.language-javascript
          code.
            var b = "bramus";
            console.log(typeof b);

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #1
        h1 JavaScript is dynamically typed

      section
        pre.language-javascript
          code.
            var c = 3;
            c = "bramus";
            console.log(typeof c);

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #2
        h1 JavaScript is weakly typed

      section
        h3 Side-effect
        pre.language-javascript
          code.
            var d = 3 + "bramus";
            console.log(d);
        pre.language-javascript
          code.
            var d = 3 + "bramus";
            console.log(typeof d);

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #3
        h1 Coercion is a feature

      section
        pre.language-javascript
          code.
            var a = "bramus";
            console.log(typeof a);
        pre.language-javascript
          code.
            var b = new String("bramus");
            console.log(typeof b);

      section.light.gif.gif--hmmz
        h1 Hmmz&hellip;

      section
        pre.language-javascript
          code.
            var a = "bramus"; // string
            console.log(a instanceof String);
        pre.language-javascript
          code.
            var b = new String("bramus"); // object
            console.log(b instanceof String);

      section
        h3.bullet <code>string</code> and <code>String</code> are not the same
        ul
          li <code>string</code> is a primitive type
          li <code>String</code> is a non-primitive type

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #4
        h1 JavaScript supports primitives and non-primitives

      section
        h3.bullet primitives vs. non-primitives
        .columns
          .column.column-12.bullet
            h4 primitives
            ul
              li “Just a value”
          .column.column-12.bullet
            h4 non-primitives
            ul
              li Contain “just a value”
              li Provide properties and functions regarding that value

      section
        pre.language-javascript
          code.
            var b = new String("bramus");
            console.log(b.length);
        pre.language-javascript
          code.
            var b = new String("bramus");
            console.log(b.toUpperCase());

      section
        pre.language-javascript
          code.
            var a = "bramus";
            console.log(a.length);
        pre.language-javascript
          code.
            var a = "bramus";
            console.log(a.toUpperCase());

      section.conclusion(data-bespoke-state='blue')
        h2 (Again) Essential #3
        h1 Coercion is a feature

      section
        h3.bullet JavaScript supported types
        .columns
          .column.column-12.bullet
            h4 primitives
            ul
              li <code>string</code>
              li <code>number</code>
              li <code>boolean</code>
              li <code>null</code>
              li <code>undefined</code>
          .column.column-12.bullet
            h4 non-primitives
            ul
              li <code>String</code>
              li <code>Number</code>
              li <code>Boolean</code>
              li <code>Array</code>
              li <code>RegExp</code>
              li <code>Function</code>
              li <code>Object</code>

      section
        h3 All non-primitives extend <code>Object</code> (1/2)
        pre.language-javascript
          code.
            var b = new String("bramus");
            console.log(b instanceof String);
        pre.language-javascript
          code.
            var b = new String("bramus");
            console.log(b instanceof Object);

      section
        h3 All non-primitives extend <code>Object</code> (2/2)
        pre.language-javascript
          code.
            var f = new Function('foo', '/* ... */');
            console.log(f instanceof Function);
        pre.language-javascript
          code.
            var f = new Function('foo', '/* ... */');
            console.log(f instanceof Object);

      section
        h3 All non-primitives their type is <code>object</code> &hellip;
        pre.language-javascript
          code.
            var b = new String("bramus");
            console.log(typeof b);
        pre.language-javascript
          code.
            var a = new Array("bramus", "ian");
            console.log(typeof a);

      section
        h3.bullet &hellip; except for <code>Function</code>
        pre.language-javascript
          code.
            var f = new Function('foo','/* ... */');
            console.log(typeof f);
        footer.bullet More on that later ;-)

      section.light(data-bespoke-state='green')
        h2 II. Using literals

      section
        pre.language-javascript
          code.
            // String Constructor
            var firstName = new String('Forrest');

            // String Literal
            var firstName = 'Forrest';

      section
        pre.language-javascript
          code.
            // Number Constructor
            var birthYear = new Number(1945);

            // Number Literal
            var birthYear = 1945;

      section
        pre.language-javascript
          code.
            // Boolean Constructor
            var isRunning = new Boolean(false);

            // Boolean Literal
            var isRunning = true;

      section
        pre.language-javascript
          code.
            // RegExp Constructor
            var hasR = new RegExp('r', 'i');

            // RegExp Literal
            var hasR = /r/i;

      section
        pre.language-javascript
          code.
            // Function Constructor
            var says = new Function('sentence', 'alert(sentence)');

            // Function Literal
            var says = function(sentence) { alert(sentence); };

            // Function statement
            function says(sentence) { alert(sentence); };

      section
        pre.language-javascript
          code.
            // Array Constructor
            var forrestFriends = new Array('Bubba', 'Lieutenant Dan');

            // Array Literal
            var forrestFriends = ['Bubba', 'Lieutenant Dan'];

      section
        pre.language-javascript
          code.
            // Object Constructor
            var forrest = new Object();
            forrest.firstName = 'Forrest';
            forrest.lastName = 'Gump';

            // Object Literal
            var forrest = {
              firstName : 'Forrest',
              lastName : 'Gump'
            };

      section.light.logo.logo--sowhat
        h1 so what?

      section
        h3.bullet String Literal Example
        pre.language-javascript
          code.
            var firstName = 'Forrest';
            console.log(typeof firstName);
        pre.language-javascript
          code.
            var firstName = 'Forrest';
            console.log(firstName instanceof String);
        footer.bullet &rarr; A primitive is returned

      section
        h3.bullet Array Literal Example
        pre.language-javascript
          code.
            var forrestFriends = ['Bubba', 'Lieutenant Dan'];
            console.log(typeof forrestFriends);
        pre.language-javascript
          code.
            var forrestFriends = ['Bubba', 'Lieutenant Dan'];
            console.log(forrestFriends instanceof Array);
        footer.bullet &rarr; A non-primitive is returned

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #5
        h1.smaller When using literals, JavaScript will try and return the primitive variant

      section.light(data-bespoke-state='green')
        h2 III. Function arguments

      section
        h3 Function arguments: primitives
        pre.language-javascript
          code.
            var change = function(sentence) {
              sentence = 'My name is Forrest, Forrest Gump';
            };

            var sentence = 'Stupid is as stupid does';
            console.log(sentence);
            change(sentence);
            // console.log(sentence);

      section
        h3 Function arguments: primitives
        pre.language-javascript
          code.
            var change = function(x) {
              x++;
            };

            var x = 3;
            console.log(x);
            change(x);
            // console.log(x);

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #6a
        h1 Primitives are passed by value

      section
        h3 Function arguments: non-primitives (1)
        pre.language-javascript
          code.
            var change = function(obj) {
                obj.sentence = 'My name is Forrest, Forrest Gump';
            };
            var forrest = {
                sentence : 'Stupid is as stupid does'
            };
            console.log(forrest.sentence);
            change(forrest);
            // console.log(forrest.sentence);

      section
        h3 Function arguments: non-primitives (2)
        pre.language-javascript
          code.
            var change = function(arr) {
                arr.unshift('Jenny');
            };
            var forrestFriends = ['Bubba', 'Lieutenant Dan'];
            console.log(forrestFriends.length);
            change(forrestFriends);
            // console.log(forrestFriends.length);

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #6b
        h1.bullet Non-primitives are passed by reference
        footer.bullet Alas, that's not entirely true ...


      section
        h3 Function arguments: non-primitives (3)
        pre.language-javascript
          code.
            var change = function(sentence) {
              sentence = 'My name is Forrest, Forrest Gump';
            };

            var sentence = new String('Stupid is as stupid does');
            console.log(sentence);
            change(sentence);
            // console.log(sentence);

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #6b
        h1.evensmaller.bullet Non-primitives for which no primitive counterpart exists are passed by reference
        footer.bullet Again: Alas, that's not entirely true ...

      section
        h3.bullet Function arguments: functions
        pre.language-javascript
          code.
            var logs = function(sentence) {
              console.log(sentence);
            };
            var forrestDoes = function(fn, sentence) {
              // alert(fn.toString());
              fn(sentence);
            };
            forrestDoes(logs, 'Stupid is as stupid does');
        footer.bullet Internally, JavaScript will replace <code>fn</code> with the passed in function

      section
        h3 Function arguments: anonymous functions
        pre.language-javascript
          code.
            var forrestDoes = function(fn, sentence) {
              fn(sentence);
            };
            forrestDoes(function(sentence) {
              console.log(sentence);
            }, 'Stupid is as stupid does');

      section
        h3.bullet Function arguments: functions: by val or by ref?
        pre.language-javascript
          code.
            function change(fn) {
              fn = function() {
                alert('My name is Forrest, Forrest Gump');
              };
              return 'changed';
            };
            var says = function() {
              alert('Stupid is as stupid does');
            };

            says();
            console.log(change(says));
            setTimeout(says, 2500); // Intentionally added a timeout.
        footer.bullet Functions are passed by value

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #6b
        h1.evensmaller Non-primitives for which no primitive counterpart exists, except functions, are passed by reference

      section.light.logo.logo--why
        h1 But why; it's an <code>Object</code>, right?

      section
        pre.language-javascript
          code.
            var a = new Array('bramus', 'ian');
            console.log(typeof a);
        pre.language-javascript
          code.
            var s = new String('bramus');
            console.log(typeof s);
        pre.language-javascript
          code.
            var f = new Function('foo', '/* ... */');
            console.log(typeof f);

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #6, in layman's term
        h1.evensmaller If it's a function, or a primitive variant exists: pass by value.<br />Else: pass by reference.

      section.light(data-bespoke-state='green')
        h2 IV. Closures

      section
        pre.language-javascript
          code.
            var firstName = 'Forrest';

            var forrestFriends = function() {
              var friends = ['Bubba', 'Lieutenant Dan'];
              var friendsCount = function() {
                return friends.length;
              };
              var joinFriends = function() {
                return firstName + ' has ' + friendsCount() + ' friends';
              };
              return joinFriends();
            };
            console.log(forrestFriends());

      section.gif.gif--notsureif
        h1.smaller How come <code>forrestFriends</code> knows the value of <code>firstName</code>?

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #7
        h1.smaller Whenever you create a function, a closure is also created

      section
        h3.bullet A closure is the glue between the created function and the environment in which it was created
        footer.bullet That environment = LexicalEnvironment = the outer scope of the function

      section
        h3 The function will use the closure as a gateway to access the LexicalEnvironment

      section
        h3 LexicalEnvironments can be traversed<br />until the root scope is reached

      section.gif.gif--notsureif-3

      section.conclusion(data-bespoke-state='red')
        h1 Beware, there are some things you must know though

      section
        h3 By value or by reference?
        pre.language-javascript
          code.
            var firstName = 'Forrest';
            var forrestFriends = function() {
                var friends = ['Bubba', 'Lieutenant Dan'];
                var friendsCount = function() {
                    return friends.length;
                };
                var joinFriends = function() {
                    return firstName + ' has ' + friendsCount() + ' friends';
                };
                // Change friends, after the function was created
                friends.unshift('Jenny');
                return joinFriends();
            };
            console.log(forrestFriends());

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #8
        h1.smaller Closures refer to outer scope variables by reference

      section
        h3 What if a function has returned?
        pre.language-javascript
          code.
            var firstName = 'Forrest';
            var forrestFriends = function() {
              var friends = ['Bubba', 'Lieutenant Dan'];
              var friendsCount = function() {
                return friends.length;
              };
              var joinFriends = function() {
                return firstName + ' has ' + friendsCount() + ' friends';
              };
              return joinFriends;
            };
            var ff = forrestFriends();

            console.log(ff());

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #9
        h1.evensmaller Closures have access to outer scope variables even after the function returns

      section
        h3.bullet Closing Example
        pre.language-javascript
          code.
            var says = function(what) {
              return function(verb) {
                return what + ' ' + verb;
              };
            };
            var shit = says('Shit');
            console.log(shit('happens'));
            // console.log(says('Shit')('happens'));

        footer.bullet Also known as currying

      section.light(data-bespoke-state='green')
        h2 V. Immediately Invoked Functions

      section
        h3 Consider this function
        pre.language-javascript
          code.
            var run = function() {
              alert('Run Forrest, Run');
            };
            run();
      section
        h3 No harm in adding brackets
        pre.language-javascript
          code.
            var run = (function() {
              alert('Run Forrest, Run');
            });
            run();

      section
        h3 Internally the code becomes this<br /><em>(pass by value!)</em>
        pre.language-javascript
          code.
            (function() {
              alert('Run Forrest, Run');
            })();

      section
        h3.bullet The function is now
        ul
          li anonymous
          li invoked immediately
        h3.bullet &rarr; We call this an<br /><em>Immediately Invoked Function Expression</em> (IIFE)

      section
        h3 IIFE with a parameter
        pre.language-javascript
          code.
            (function(sentence) {
              alert(sentence);
            })('Run Forrest, Run');

      section.conclusion(data-bespoke-state='blue')
        h2 Essential #10
        h1.smaller Immediately Invoked Function Expressions<br />are nifty

      section.light(data-bespoke-state='green')
        h2 VI. And now all together &hellip;

      section
        pre.language-javascript
          code.
            var el, wrapper = document.getElementById('alltogether-1');
            wrapper.innerHTML = '';
            for (var i = 0; i < 3; i++) { // add three links
                el = document.createElement('a');
                el.style.marginRight = '10px';
                el.innerHTML = 'Link ' + i;
                el.addEventListener('click', function() {
                  alert('I am link ' + i);
                });
                wrapper.appendChild(el);
            };
        .result(id='alltogether-1')
          em (Run the code example to see the result appear here)

      section.conclusion(data-bespoke-state='blue')
        h2 Again: Essential #8
        h1.smaller Closures refer to outer scope variables by reference

      section.light.gif.gif--brainstorm
        h1 What if we create a local variable?

      section
        pre.language-javascript
          code.
            var el, wrapper = document.getElementById('alltogether-2');
            wrapper.innerHTML = '';
            for (var i = 0; i < 3; i++) { // add three links
                el = document.createElement('a');
                el.style.marginRight = '10px';
                el.innerHTML = 'Link ' + i;
                el.addEventListener('click', function() {
                  var j = i;
                  alert('I am link ' + j);
                });
                wrapper.appendChild(el);
            };
        .result(id='alltogether-2')
          em (Run the code example to see the result appear here)

      section.gif.gif--notsureif
        h1 Not sure if geekfun or just trolling.

      section
        h3.bullet OK, here are a few tips
        ul
          li Functions may return functions
          li Functions can be invoked immediately
          li Some types of variables are passed by value to functions

      section
        pre.language-javascript
          code.
            var el, wrapper = document.getElementById('alltogether-3');
            wrapper.innerHTML = '';
            for (var i = 0; i < 3; i++) { // add three links
                el = document.createElement('a');
                el.style.marginRight = '10px';
                el.innerHTML = 'Link ' + i;
                el.addEventListener('click', function() {
                  alert('I am link ' + j);
                });
                wrapper.appendChild(el);
            };
        .result(id='alltogether-3')
          em (Run the code example to see the result appear here)

      section.gif.gif--fireworks
        h1 Ow yeah!

      section
        pre.language-javascript
          code.
            var el, wrapper = document.getElementById('alltogether-4');
            wrapper.innerHTML = '';
            for (var i = 0; i < 3; i++) { // add three links
                el = document.createElement('a');
                el.style.marginRight = '10px';
                el.innerHTML = 'Link ' + i;
                el.addEventListener('click', function(j) {
                  return function() {
                    alert('I am link ' + j);
                  };
                }(i));
                wrapper.appendChild(el);
            };
        .result(id='alltogether-4')
          em (Run the code example to see the result appear here)

      section
        h3 Really, if you know <em>why</em> that piece of code works, you know quite a lot about JavaScript

      section.light(data-bespoke-state='green')
        h2.bullet Want More?
        ul
          li Event capturing and bubbling
          li Event delegation
          li Objects and Inheritance
          li <code>Function#call()</code>, <code>Function#apply()</code>, <code>Function#bind()</code>
          li Promises
          li &hellip;

      section.main
        h1 Thank you!
        h3
          a(href='https://twitter.com/bramus') @bramus
          img.avatar.avatar--small(src='images/bramus.png')

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild
